# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Modifyprice.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt5 import QtCore,   QtWidgets

from failure import Ui_Failure
from success import Ui_Success

class Ui_MainWindowModify(object):
    def setupUi(self, MainWindow):
        """
        Setup Ui for Modify Function
        :param MainWindow:
        :return:
        """
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(396, 177)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(64, 44, 99, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(60, 80, 91, 20))
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setEnabled(True)
        self.lineEdit.setGeometry(QtCore.QRect(200, 40, 131, 21))
        self.lineEdit.setAutoFillBackground(False)
        self.lineEdit.setObjectName("lineEdit")

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setEnabled(True)
        self.lineEdit_2.setGeometry(QtCore.QRect(200, 80, 110, 23))
        self.lineEdit_2.setAutoFillBackground(False)
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(310, 110, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setDisabled(True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 396, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.lineEdit.textChanged.connect(self.CollectData)
        self.lineEdit_2.textChanged.connect(self.CollectData)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Modify the price"))
        self.label.setText(_translate("MainWindow", "Write the book ISBN"))
        self.label_2.setText(_translate("MainWindow", "The new price"))
        self.pushButton.setText(_translate("MainWindow", "Modify"))
    def CollectData(self):
        """
        Checks if str is greater and price isn't empty
        :return:
        """
        str = self.lineEdit.text().replace("-", "").replace(" ", "")
        if (len(str) < 4 or len(self.lineEdit_2.text()) == 0) or (str.isalnum() and str.isdigit() == False) or\
                self.lineEdit_2.text().isdigit() == False:
            self.pushButton.setDisabled(True)
        elif len(str) >= 4 and len(self.lineEdit_2.text()) > 0:
            self.pushButton.setDisabled(False)
            self.pushButton.clicked.connect(self.Modify)
    def Modify(self):
        """When a mouseEvent occurs it checks if the ISBN is stored update the price otherwise it fails"""
        connection = sqlite3.connect("bookstore.db")
        cursor = connection.cursor()

        row = cursor.execute("SELECT COUNT(id) FROM bookstore WHERE id =\'" + self.lineEdit.text() + "\'")
        row = (row.fetchone())[0]
        print(int(row) == int(1))
        if int(row) == int(1):
            cursor.execute("UPDATE bookstore SET PRICE =\'" + self.lineEdit_2.text()
                           + "\' WHERE id =\'" + self.lineEdit.text() + "\'")
            connection.commit()
            self.pushButton.disconnect()
            self.Success()
        else:
            self.Failure()
            connection.commit()
            self.pushButton.disconnect()

        connection.close()

    def Failure(self):
        """
        Failure appears
        :return:
        """
        self.failure = QtWidgets.QMainWindow()
        self.ui = Ui_Failure()
        self.ui.text = "Book doesn't exist to modify its price"
        self.ui.setupUi(self.failure)
        self.failure.show()

    def Success(self):
        """
        Success appears
        :return:
        """
        self.success = QtWidgets.QMainWindow()
        self.ui = Ui_Success()
        self.ui.text = "Price is modified"
        self.ui.setupUi(self.success)
        self.success.show()



if __name__ == "__main__":
    """
    Main Program
    """
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindowModify()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
