# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Addfunction.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets

from failure import Ui_Failure
from success import Ui_Success

connection = sqlite3.connect("bookstore.db")


class Ui_bk1(object):
    def __init__(self):
        """
        :param self: object of class
        :return: none
        This is just a __init__ constructor function to instantiate the GUI when a failure operation implemented
        """
        self.failure = QtWidgets.QMainWindow()
        self.strID = ""
        self.strName = ""
        self.strAuthor = ""

    def setupUi(self, bk1):
        """
        :param self: object of class
        :param bk1: object of QMainWindow
        :return: none
        This function aims to setupUi the AddFunction to allow the user to see the GUI easily
        """
        bk1.setObjectName("bk1")
        bk1.setEnabled(True)
        bk1.setFixedSize(437, 132)
        font = QtGui.QFont()
        bk1.setFont(font)
        bk1.setAcceptDrops(False)
        bk1.setInputMethodHints(QtCore.Qt.ImhNone)
        bk1.setIconSize(QtCore.QSize(24, 24))
        bk1.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(bk1)
        self.centralwidget.setObjectName("centralwidget")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 51, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 40, 71, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 70, 81, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(210, 10, 81, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(220, 40, 41, 16))
        self.label_5.setObjectName("label_5")
        self.doubleSpinBox = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.doubleSpinBox.setGeometry(QtCore.QRect(250, 10, 62, 22))
        self.doubleSpinBox.setObjectName("doubleSpinBox")
        self.doubleSpinBox.setMaximum(1000)
        self.spinBox = QtWidgets.QSpinBox(self.centralwidget)
        self.spinBox.setGeometry(QtCore.QRect(260, 40, 42, 22))
        self.spinBox.setObjectName("spinBox")
        self.spinBox.setMaximum(1000)

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(350, 30, 75, 23))
        self.pushButton.setObjectName("pushButton")

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(100, 10, 101, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton.setDisabled(True)

        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(100, 40, 101, 20))
        self.lineEdit_2.setObjectName("lineEdit_2")

        self.lineEdit_3 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_3.setGeometry(QtCore.QRect(100, 70, 101, 20))
        self.lineEdit_3.setObjectName("lineEdit_3")

        self.lineEdit.textChanged.connect(self.CollectData)
        self.lineEdit_2.textChanged.connect(self.CollectData)
        self.lineEdit_3.textChanged.connect(self.CollectData)
        bk1.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(bk1)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 437, 21))
        self.menubar.setObjectName("menubar")
        bk1.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(bk1)
        self.statusbar.setObjectName("statusbar")
        bk1.setStatusBar(self.statusbar)

        self.retranslateUi(bk1)
        QtCore.QMetaObject.connectSlotsByName(bk1)
        #For testing purposes
        #self.Check()

    def retranslateUi(self, bk1):
        """
        Setup GUI with the labels
        :param bk1: object
        :return: None
        """
        _translate = QtCore.QCoreApplication.translate
        bk1.setWindowTitle(_translate("bk1", "Add a Book"))
        self.label.setText(_translate("bk1", "Book ISBN:"))
        self.label_2.setText(_translate("bk1", "Book Name:"))
        self.label_3.setText(_translate("bk1", "Author Name:"))
        self.label_4.setText(_translate("bk1", "Price:"))
        self.label_5.setText(_translate("bk1", "Pages :"))
        self.pushButton.setText(_translate("bk1", "Add"))


    def CollectData(self):
        """
        When a mouse event happens it executes those lines and check if the id isn't alphabetic and book name
        isn't zero.
        """
        str = self.lineEdit.text().replace("-", "").replace(" ", "")
        if len(self.lineEdit_2.text()) == 0 or len(str) < 4 or len(self.lineEdit_3.text()) < 4 \
                or (str.isalpha() or (str.isalnum() and str.isdigit() == False)) or str.isalpha():
            self.pushButton.setDisabled(True)
        elif len(self.lineEdit.text()) >= 4 and len(self.lineEdit_2.text()) > 0 and len(self.lineEdit_3.text()) >= 4:
            self.pushButton.setDisabled(False)
            self.pushButton.clicked.connect(self.Check)

    def Check(self):
        """
        Check for GUI if it is compatible to check if the ISBN is greater than 4 characters and 2018 and the
        the Book Name has letters and etc....
        After the conditions above achieved , the database starts to store the data , the id is primary key so it shouldn't
        :return: Bool,String
        """
        #For testing purposes only
        """
        self.lineEdit.setText(self.strID)
        self.lineEdit_2.setText(self.strName)
        self.lineEdit_3.setText(self.strAuthor)
        if int(self.lineEdit.text().replace('-', "")) < 2018:
            self.Failure("ISBN should be greater than 2018", 0)
            return 'Less'
        elif int(self.lineEdit.text().replace('-', "")) >= 2018 and len(self.lineEdit_2.text()) > 0 and len(
            self.lineEdit_3.text()) >= 4:
            return True 
        """
        if int(self.lineEdit.text().replace('-', "")) < 2018:
            self.Failure("ISBN should be greater than 2018", 0) 
        elif int(self.lineEdit.text().replace('-', "")) >= 2018 and len(self.lineEdit_2.text()) > 0 and len(
            self.lineEdit_3.text()) >= 4:
            connection = sqlite3.connect("bookstore.db")
            cursor = connection.cursor()
            id = str(self.lineEdit.text())
            bookname = self.lineEdit_2.text()
            authname = self.lineEdit_3.text()
            price = self.doubleSpinBox.text()
            pages = str(self.spinBox.text())
            print(id)
            print(bookname)
            print(authname)
            print(price)
            print(pages)
            # Test
            try:
                cursor.execute("INSERT INTO bookstore (id, Book_Name, pages,PRICE ,AUTHOR_NAME) VALUES(\"" + id +
                               "\",\"" + bookname + "\",\"" + pages + "\",\"" + price + "\",\"" + authname + "\")")
                self.pushButton.clicked.disconnect()
                self.Success()
                connection.commit()

            except sqlite3.IntegrityError:
                self.Failure(" ", 1)
            connection.close()
            #cursor.execute("INSERT INTO bookstore VALUES (201814310,\"Harry Potter\",20,191.5,\"J.K. Rowling\")")
            #rows = cursor.execute("SELECT * FROM bookstore")
            #print(rows.fetchall())
    def Failure(self, text, i):
        """
        Failure operation
        :param text: string
        :param i: int
        :return: String
        """
        self.ui = Ui_Failure()
        if i == 0:
            self.ui.text = text
            self.ui.setupUi(self.failure)
            self.failure.show()
            return text
        elif i == 1:
            self.ui.text = "ISBN is primary key"
            self.ui.setupUi(self.failure)
            self.failure.show()
            return "ISBN is primary key"

    def Success(self):
        self.success = QtWidgets.QMainWindow()
        self.ui = Ui_Success()
        self.ui.text = "Book is added"
        self.ui.setupUi(self.success)
        self.success.show()

if __name__ == "__main__":
    """
    Main Program
    """
    import sys, doctest

    doctest.testmod()
    app = QtWidgets.QApplication(sys.argv)
    bk1 = QtWidgets.QMainWindow()
    ui = Ui_bk1()
    """
    ui.strID = "2017"
    ui.strName = "sfsdfsdff"
    ui.strAuthor = "sfsdssdfsdff"
    """
    ui.setupUi(bk1)
    bk1.show()
    sys.exit(app.exec_())
